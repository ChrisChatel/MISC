MISC {
  Program = Statement*

  Statement =
      PrintStmt
    | VarDecl_value
    | VarDecl_function
    | IfStmt
    | LoopStmt
    | BreakStmt
    | ReturnStmt
    | SwampizzoStmt

  PrintStmt        = "shout" Expr ";"
  VarDecl_value    = ("letsgo" | "const") Identifier TypeAnnotation? "=" Expr ";"
  VarDecl_function = ("letsgo" | "const" | "youngMetro" | "straightup") Identifier TypeAnnotation? FunctionDef

  IfStmt           = ("ifLit" | "21if") "(" Expr ")" Block ElseClause?
  ElseClause       = ("elseLit" | "else") Block

  LoopStmt         = "4x4" "(" Init ";" Condition ";" Increment ")" Block
  BreakStmt        = ("skrrt" | "fweh") ";"
  ReturnStmt       = ("return" | "sendit" | "seeyuh") Expr? ";"
  SwampizzoStmt    = "swampizzo" ";"

  Block = "{" Statement* "}"

  Expr =
      FunctionDef      -- functionExpr
    | CallExpr         -- call
    | OrExpr           -- normalExpr

  OrExpr            = AndExpr ("||" AndExpr)*
  AndExpr           = EqualityExpr ("&&" EqualityExpr)*
  EqualityExpr      = RelationalExpr (("==" | "!=") RelationalExpr)*
  RelationalExpr    = AdditiveExpr (("<" | "<=" | ">" | ">=") AdditiveExpr)*
  AdditiveExpr      = MultiplicativeExpr (("+" | "-") MultiplicativeExpr)*
  MultiplicativeExpr = MemberExpr (("*" | "/" | "%") MemberExpr)*

  MemberExpr        = PrimaryExpr SubscriptOrDot*
  SubscriptOrDot    = "." Identifier     -- dot
                    | "[" Expr "]"       -- subscript

  PrimaryExpr =
      CallExpr            -- call
    | "(" Expr ")"        -- group
    | BooleanLiteral
    | NullLiteral
    | Number              -- number
    | Identifier          -- identifier
    | StringLiteral       -- string
    | ArrayLiteral        -- array
    | ObjectLiteral       -- object

  BooleanLiteral = "onGod"  -- true
                 | "carti"  -- false

  NullLiteral    = "ghost"

  ObjectLiteral  = "{" PairList? "}"
  PairList       = ListOf<Pair, ",">
  Pair           = Identifier ":" Expr

  CallExpr       = Identifier "(" ListOf<Expr, ","> ")"
  FunctionDef    = "(" TypedParamList ")" TypeAnnotation? Block
  TypedParamList = ListOf<TypedParam, ",">
  TypedParam     = Identifier TypeAnnotation?

  TypeAnnotation = ":" Type

  Type =
      "Num"
    | "Str"
    | "Bool"
    | "Void"
    | "(" TypeList ")" "->" Type    -- functionType
    | "[" Type "]"                  -- arrayType
    | "{" PairTypeList? "}"         -- objectType

  TypeList       = ListOf<Type, ",">
  PairTypeList   = ListOf<PairType, ",">
  PairType       = Identifier ":" Type

  Init           = Identifier "=" Expr
  Condition      = Expr
  Increment      = Identifier ("++" | "--")

  Number         = digit+
  Identifier     = letter (letter | digit)*
  StringLiteral  = "\"" StringChar* "\""
  StringChar     = ~("\\" | "\"" | "\n" | "\r") any
  ArrayLiteral   = "[" ListOf<Expr, ","> "]"
}
